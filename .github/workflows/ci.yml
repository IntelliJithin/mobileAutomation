name: Mobile automation test
 
on:
  workflow_dispatch:
 
jobs:
  build:
    runs-on: ubuntu-latest
 
    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@v4
 
      - name: 🐢 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
 
      - name: Clean node_modules and package-lock.json
        run: |
          rm -rf node_modules
          rm package-lock.json
          npm install # Reinstall dependencies cleanly
 
      - name: 🏗️ Install Dependencies
        run: npm install
 
      - name: Install Appium and drivers
        run: |
          echo "Checking currently installed Appium driver..."
          INSTALLED_DRIVERS=$(appium driver list --installed 2>&1)
          echo "$INSTALLED_DRIVERS"

          if echo "$INSTALLED_DRIVERS" | grep -q "uiautomator2"; then
           echo "uiautomator2 is already installed. Skipping removal and reinstallation."
          else
           echo "uiautomator2 not found. Reinstalling Appium and drivers..."

           npm uninstall -g appium || true
           rm -rf ~/.appium || true
           npm install -g appium

           appium driver install uiautomator2
          fi

          echo "Final list of installed appium drivers:"
          appium driver list --installed
           
      - name: Install Java
        run: sudo apt-get install -y openjdk-11-jdk
 
      - name: Install Android SDK and Setup Path
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
 
          # Download and extract Android command-line tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-8092744_latest.zip
          mkdir -p $HOME/android-sdk/cmdline-tools
          unzip -q commandlinetools-linux-8092744_latest.zip -d $HOME/android-sdk/cmdline-tools
          mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
 
          # Set environment variables
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH" >> $GITHUB_ENV
 
          # Reload the environment variables
          source $GITHUB_ENV
 
          # Install SDK components
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" "build-tools;30.0.3" "platforms;android-29" "system-images;android-29;google_apis;x86_64" "emulator"
 
      - name: Set up Android Emulator
        run: |
          # Ensure correct path for avdmanager
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH
 
          # Create new Android Virtual Device (AVD)
          echo no | avdmanager create avd -n test_emulator -k "system-images;android-29;google_apis;x86_64" --device "pixel"
 
          # Start emulator
          nohup emulator -avd test_emulator -no-window -noaudio -no-boot-anim -gpu swiftshader_indirect &
 
          # Wait for emulator to start
          adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
 
      - name: List installed Appium drivers
        run: appium driver list --installed
 
      - name: Fix Permissions
        run: chmod +x node_modules/.bin/wdio
 
      - name: 🧪 Run WebdriverIO Tests
        run: npx wdio wdio.conf.js
 
      - name: 📦 Upload Logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: logs
          path: logs
