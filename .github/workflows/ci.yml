name: Mobile automation test
 
on:
  workflow_dispatch:
 
jobs:
  build:
    runs-on: ubuntu-latest
 
    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v4
 
      - name: üê¢ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
 
      - name: Clean node_modules and package-lock.json
        run: |
          rm -rf node_modules
          rm package-lock.json
          npm install # Reinstall dependencies cleanly
 
      - name: üèóÔ∏è Install Dependencies
        run: npm install
 
      - name: Install Appium and drivers
        run: |
          echo "Checking currently installed Appium driver..."
          if ! command -v appium &> /dev/null; then
           echo "Appium not found. Installing..."
           npm install -g appium
          fi
          
          INSTALLED_DRIVERS=$(appium driver list --installed 2>&1 || echo "Error: Appium command failed")

          if echo "$INSTALLED_DRIVERS" | grep -q "uiautomator2"; then
           echo "uiautomator2 is already installed. Skipping reinstallation."
          else
           echo "uiautomator2 not found. Reinstalling Appium and drivers..."
           appium driver install uiautomator2
          fi
                    
      - name: Install Java
        run: sudo apt-get install -y openjdk-11-jdk
 
      - name: Install Android SDK and Setup Path
        run: |
         echo "üì• Installing Android SDK & dependencies..."
         sudo apt-get update
         sudo apt-get install -y wget unzip
 
         echo "üì• Downloading Android command-line tools..."
         wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
 
         echo "üìÇ Extracting Android command-line tools..."
         mkdir -p $HOME/android-sdk/cmdline-tools
         unzip -q commandlinetools-linux-11076708_latest.zip -d $HOME/android-sdk/cmdline-tools
         mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
 
         echo "üîß Setting environment variables..."
         echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
         echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH" >> $GITHUB_ENV
 
         # Reload the environment variables
         source $GITHUB_ENV
 
         echo "üìå Verifying sdkmanager existence..."
         if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
         echo "‚úÖ sdkmanager found!"
         else
         echo "‚ùå ERROR: sdkmanager not found!"
         exit 1
         fi
 
         echo "‚úÖ Accepting licenses..."
         yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || echo "‚ö†Ô∏è License acceptance failed"
 
         echo "üì• Installing required SDK packages..."
         $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools" "build-tools;30.0.3" "platforms;android-29" "system-images;android-29;default;x86_64"
 
         echo "üìå Listing installed SDK components..."
         $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list

      - name: Verify SDK Installation
        run: |
          echo "Checking Android SDK paths..."
          ls -la $ANDROID_HOME
          ls -la $ANDROID_HOME/platforms
          ls -la $ANDROID_HOME/system-images/android-29

          echo "Checking available SDK packages..."
          sdkmanager --list || echo "sdkmanager command failed"
 
      - name: Set up Android Emulator
        run: |
          echo "üìå Checking if AVD already exists..."
          if $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd | grep -q "test_emulator"; then
          echo "‚úÖ AVD already exist!"
          else
          echo "üìå Creating AVD..."
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test_emulator -k "system-images;android-29;default;x86_64" --device "pixel"
          fi

          echo "üìå Setting AVD Path..."
          export ANDROID_AVD_HOME=$HOME/.config/.android/avd
          echo "ANDROID_AVD_HOME=$ANDROID_AVD_HOME" >> $GITHUB_ENV

          echo "üìå Listing available AVDs..."
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd
 
          echo "üì¢ Starting emulator..."
          nohup $ANDROID_HOME/emulator/emulator -avd test_emulator -no-window -noaudio -no-boot-anim -gpu swiftshader_indirect -no-snapshot > emulator.log 2>&1 &

          echo "‚è≥ Waiting for emulator to start..."
          START_TIME=$(date +%s)
          timeout 120 bash -c until adb devices | grep -m 1 "emulator-" || [$(date +%s) -ge $(($START_TIME + 120))]; do echo "Still waiting for emulator to start..."; sleep 5; done'

          if ! adb devices | grep -q "emulator-"; then
            echo "Emulator did not start correctly. Check emulator logs for details."
            cat emulator.log
            exit 1
          fi
 
          echo "‚úÖ Emulator is ready!"
 
      - name: List installed Appium drivers
        run: appium driver list --installed
 
      - name: Fix Permissions
        run: chmod +x node_modules/.bin/wdio
 
      - name: üß™ Run WebdriverIO Tests
        run: npx wdio wdio.conf.js
 
      - name: üì¶ Upload Logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: logs
          path: logs
