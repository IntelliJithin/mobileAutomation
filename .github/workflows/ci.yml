name: Mobile automation test
 
on:
  workflow_dispatch:
 
jobs:
  build:
    runs-on: ubuntu-latest
 
    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@v4
 
      - name: 🐢 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
 
      - name: Clean node_modules and package-lock.json
        run: |
          rm -rf node_modules
          rm package-lock.json
          npm install # Reinstall dependencies cleanly
 
      - name: 🏗️ Install Dependencies
        run: npm install
 
      - name: Install Appium and drivers
        run: |
          echo "Checking currently installed Appium driver..."
          if ! command -v appium &> /dev/null; then
           echo "Appium not found. Installing..."
           npm install -g appium
          fi
          
          INSTALLED_DRIVERS=$(appium driver list --installed 2>&1 || echo "Error: Appium command failed")

          if echo "$INSTALLED_DRIVERS" | grep -q "uiautomator2"; then
           echo "uiautomator2 is already installed. Skipping reinstallation."
          else
           echo "uiautomator2 not found. Reinstalling Appium and drivers..."
           appium driver install uiautomator2
          fi
                    
      - name: Install Java
        run: sudo apt-get install -y openjdk-11-jdk
 
      - name: Install Android SDK and Setup Path
        run: |
         echo "📥 Installing Android SDK & dependencies..."
         sudo apt-get update
         sudo apt-get install -y wget unzip
 
         echo "📥 Downloading Android command-line tools..."
         wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
 
         echo "📂 Extracting Android command-line tools..."
         mkdir -p $HOME/android-sdk/cmdline-tools
         unzip -q commandlinetools-linux-11076708_latest.zip -d $HOME/android-sdk/cmdline-tools
         mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
 
         echo "🔧 Setting environment variables..."
         echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
         echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH" >> $GITHUB_ENV
 
         # Reload the environment variables
         source $GITHUB_ENV
 
         echo "📌 Verifying sdkmanager existence..."
         if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
         echo "✅ sdkmanager found!"
         else
         echo "❌ ERROR: sdkmanager not found!"
         exit 1
         fi
 
         echo "✅ Accepting licenses..."
         yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || echo "⚠️ License acceptance failed"
 
         echo "📥 Installing required SDK packages..."
         $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools" "build-tools;34.0.0" "platforms;android-34" "system-images;android-34;google_apis;x86_64"
 
         echo "📌 Listing installed SDK components..."
         $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list 

      - name: Verify SDK Installation
        run: |
          echo "Checking Android SDK paths..."
          ls -la $ANDROID_HOME
          ls -la $ANDROID_HOME/platforms
          ls -la $ANDROID_HOME/system-images/android-34

          echo "Checking available SDK packages..."
          sdkmanager --list || echo "sdkmanager command failed"
 
      - name: Start android emulator
        uses: reactivecircus/android-emulator-runner@v2
        timeout-minutes: 30
        with: 
          api-level: 34
          target: google_apis
          arch: x86_64
          profile: pixel
          ram-size: 4096M
          sdcard-path-or-size: 1024M
          disable-animations: true
          emulator-options: "-no-window -no-audio -no-boot-anim -gpu swiftshader_indirect -no-snapshot -tcpdump tcpdump.pcap -no-quit"
          script: |
            echo "Restarting ADB"
            adb kill-server
            adb start-server
            adb devices

            echo "Waiting to ensure emulator stays active"
            sleep 30

            echo "Emulator should be ready now"

            retries = 0
            boot_completed = 0
            while [ "$boot_completed" != "1" ] && [ "$retries" -lt 60 ]; do
              sleep 10
              boot_completed=$(ANDROID_HOME/platform-tools/adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
              echo "Boot completed status = $boot_completed"
              retries = $((retries + 1))
            done

            if [ "$boot_completed" != "1" ]; then
              echo "Emulator did not boot in time"
              exit 1
            fi
            echo "Emulator fully booted"

            while true; do
              adb shell input keyevent 82
              sleep 60
            done

            echo "Terminating emulator"
            adb emu kill
            

      - name: List installed Appium drivers
        run: appium driver list --installed
 
      - name: Fix Permissions
        run: chmod +x node_modules/.bin/wdio
 
      - name: 🧪 Run WebdriverIO Tests
        run: npx wdio wdio.conf.js
 
      - name: 📦 Upload Logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: logs
          path: logs
