name: Mobile automation test
 
on:
  workflow_dispatch:
 
jobs:
  build:
    runs-on: ubuntu-latest
 
    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v4
 
      - name: üê¢ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
 
      - name: Clean node_modules and package-lock.json
        run: |
          rm -rf node_modules
          rm package-lock.json
          npm install # Reinstall dependencies cleanly
 
      - name: üèóÔ∏è Install Dependencies
        run: npm install
 
      - name: Install Appium and drivers
        run: |
          echo "Checking currently installed Appium driver..."
          if ! command -v appium &> /dev/null; then
           echo "Appium not found. Installing..."
           npm install -g appium
          fi
          
          INSTALLED_DRIVERS=$(appium driver list --installed 2>&1 || echo "Error: Appium command failed")
          if echo "$INSTALLED_DRIVERS" | grep -q "uiautomator2"; then
           echo "uiautomator2 is already installed. Skipping reinstallation."
          else
           echo "uiautomator2 not found. Reinstalling Appium and drivers..."
           appium driver install uiautomator2
          fi
                    
      - name: Install Java
        run: sudo apt-get install -y openjdk-11-jdk
 
      - name: Install Android SDK and Setup Path
        run: |
         echo "üì• Installing Android SDK & dependencies..."
         sudo apt-get update
         sudo apt-get install -y wget unzip
 
         echo "üì• Downloading Android command-line tools..."
         wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
 
         echo "üìÇ Extracting Android command-line tools..."
         mkdir -p $HOME/android-sdk/cmdline-tools
         unzip -q commandlinetools-linux-11076708_latest.zip -d $HOME/android-sdk/cmdline-tools
         mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
 
         echo "üîß Setting environment variables..."
         echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
         echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH" >> $GITHUB_ENV
 
         # Reload the environment variables
         source $GITHUB_ENV
 
         echo "üìå Verifying sdkmanager existence..."
         if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
            echo "‚úÖ sdkmanager found!"
         else
            echo "‚ùå ERROR: sdkmanager not found!"
            exit 1
         fi
 
         echo "‚úÖ Accepting licenses..."
         yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || echo "‚ö†Ô∏è License acceptance failed"
 
         echo "üì• Installing required SDK packages..."
         $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools" "build-tools;30.0.3" "platforms;android-30" "system-images;android-30;google_apis;x86_64"
 
         echo "üìå Listing installed SDK components..."
         $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list 

      - name: Verify SDK Installation
        run: |
          echo "Checking Android SDK paths..."
          ls -la $ANDROID_HOME
          ls -la $ANDROID_HOME/platforms
          ls -la $ANDROID_HOME/system-images/android-30
          echo "Checking available SDK packages..."
          sdkmanager --list || echo "sdkmanager command failed"
          
      - name: Start android emulator and run test
        uses: reactivecircus/android-emulator-runner@v2
        timeout-minutes: 15
        env:
          ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: 300
        with: 
          api-level: 30
          arch: x86_64
          script: |
            echo "Setting APK permissions"
            chmod 644 downloaded_apks/*.apk

            echo "Fixing WebDriverIO permissions"
            chmod +x node_modules/.bin/wdio 
            
            echo "Waiting for emulator to fully boot"
            adb wait-for-device
            adb shell getprop sys.boot_completed | grep -m 1 "1"

            echo "Emulator boot completed. Checking devices..."
            adb devices

            echo "Installing Appium settings APK"
            adb install downloaded_apks/settings_apk-debug.apk || echo "Failed to install setting apk"
            echo "Installing UiAutomator2 server APK"
            adb install downloaded_apks/appium-uiautomator2-server-v7.2.3.apk || echo "Failed to install UiAutomator2 Server"
            echo "Installing UiAutomator2 server test APK"
            adb install downloaded_apks/appium-uiautomator2-server-debug-androidTest.apk || echo "Failed to install UiAutomator2 Server Test"
            
            echo "Granting necessary permissions"
            adb shell pm grant io.appium.android.setting android.permission.SETTINGS
            adb shell pm grant io.appium.android.setting android.permission.WRITE_SECURE_SETTINGS
            adb shell pm grant io.appium.android.setting android.permission.CHANGE_CONFIGURATION
            adb shell pm grant io.appium.android.setting android.permission.READ_PHONE_STATE
            adb shell am broadcast -a io.appium.setting.wifi --es setstatus enable || echo "Failed to enable WiFi"
            
            echo "Starting logcat to capture logs"
            adb logcat -s UiAutomator2 &
            
            echo "Starting Appium server"
            appium --base-path /wd/hub --log appium.log &
            
            echo "Waiting for Appium server to start"
            nc -z localhost 4723 || (eccho "Appium server not started, exiting..." && exit 1)
            
            echo "Manually starting UiAutomator2..."
            adb shell am instrument -e debug false -e disableAnalytics true io.appium.uiautomator2.server.test/androidx.test.runner.AndroidJUnitRunner

            echo "Running tests now..."
            npx wdio wdio.conf.js
           
            echo "Stopping logcat"
            pkill -f "adb logcat"
           
            echo "Checking uiautomator2 logs"
            adb logcat -d | grep -i "uiautomator"
      
      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with: 
          name: screenshots
          path: ./error_screenshot_*.png
      
      - name: üì¶ Upload Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: logs
          path: logs